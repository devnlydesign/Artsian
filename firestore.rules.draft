rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // In a real app, manage admins via custom claims or a dedicated collection
      return isAuthenticated() && request.auth.token.admin == true;
    }

    function isPublicAndApproved(docData) {
      return docData.isPublic == true && docData.moderationStatus == 'approved';
    }
    
    function isModerationUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['moderationStatus', 'moderationInfo', 'updatedAt']);
    }
    
    function isCountUpdate(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields.concat(['updatedAt']));
    }

    function isParticipant(conversationId) {
      return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && request.resource.data.createdAt == request.time;
      allow update: if isOwner(userId) || isAdmin();
      // No direct delete by users; handled by admin or retention policies.
    }

    // Generic Content (posts, reels, music, otherArt, artworks)
    match /{collectionName}/{contentId}
      where collectionName in ['posts', 'reels', 'music', 'otherArt', 'artworks'] {
      allow read: if isPublicAndApproved(resource.data) || 
                     (isAuthenticated() && request.auth.uid == resource.data.userId) || 
                     isAdmin();
                     // Consider follower-only logic: exists(/databases/$(database)/documents/followers/$(request.auth.uid)_$(resource.data.userId))

      allow create: if isOwner(request.resource.data.userId) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.likesCount == 0 &&
                       request.resource.data.commentsCount == 0 &&
                       request.resource.data.sharesCount == 0 && // Assuming sharesCount for generic content
                       (request.resource.data.viewsCount == 0 || request.resource.data.viewsCount == null) && // For reels/stories
                       (request.resource.data.moderationStatus == 'pending' || request.resource.data.moderationStatus == 'approved'); // Allow approved if pre-moderated

      allow update: if (isOwner(resource.data.userId) && !isModerationUpdate() && !isCountUpdate(['likesCount', 'commentsCount', 'sharesCount', 'viewsCount'])) || 
                       (isAdmin() && (isModerationUpdate() || !isCountUpdate(['likesCount', 'commentsCount', 'sharesCount', 'viewsCount']))) ||
                       (isAuthenticated() && isCountUpdate(['likesCount', 'commentsCount', 'sharesCount', 'viewsCount'])); // Allow functions/triggers to update counts

      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Stories
    match /stories/{storyId} {
      allow read: if (resource.data.moderationStatus == 'approved' && resource.data.expiresAt > request.time) || 
                     (isAuthenticated() && request.auth.uid == resource.data.userId) ||
                     isAdmin();
      allow create: if isOwner(request.resource.data.userId) && 
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.expiresAt > request.time &&
                       request.resource.data.viewsCount == 0 &&
                       (request.resource.data.moderationStatus == 'pending' || request.resource.data.moderationStatus == 'approved');
      allow update: if (isOwner(resource.data.userId) && !isModerationUpdate() && !isCountUpdate(['viewsCount', 'seenBy'])) ||
                       (isAdmin() && isModerationUpdate()) ||
                       (isAuthenticated() && isCountUpdate(['viewsCount', 'seenBy']));
      allow delete: if isOwner(resource.data.userId) || isAdmin() || resource.data.expiresAt <= request.time;
    }

    // Shop Items
    match /shopItems/{itemId} {
      allow read: if isPublicAndApproved(resource.data) || 
                     (isAuthenticated() && request.auth.uid == resource.data.artistId) ||
                     isAdmin();
      allow create: if isOwner(request.resource.data.artistId) &&
                       (request.resource.data.moderationStatus == 'pending' || request.resource.data.moderationStatus == 'approved');
      allow update: if (isOwner(resource.data.artistId) && !isModerationUpdate()) ||
                       (isAdmin() && isModerationUpdate());
      allow delete: if isOwner(resource.data.artistId) || isAdmin();
    }
    
    // Orders
    match /orders/{orderId} {
        allow read, update: if isOwner(resource.data.userId) || 
                               (isAuthenticated() && resource.data.items[0].itemId != null && request.auth.uid == get(/databases/$(database)/documents/shopItems/$(resource.data.items[0].itemId)).data.artistId) ||
                               isAdmin();
        allow create: if isOwner(request.resource.data.userId); // Stripe webhook should create this typically
    }

    // Comments
    match /comments/{commentId} {
      function getParentContent(docData) {
        // Simplified: assumes collection name is contentType + 's'
        // Needs robust mapping for production (e.g. 'artwork' -> 'artworks')
        let collection = docData.contentType + (docData.contentType.endsWith('y') ? docData.contentType.slice(0, -1) + 'ies' : docData.contentType + 's');
        if (docData.contentType == 'otherArt') collection = 'otherArt';
        if (docData.contentType == 'music') collection = 'music';
        if (docData.contentType == 'artwork') collection = 'artworks';
        if (docData.contentType == 'communityPost') return /databases/$(database)/documents/communities/$(get(/databases/$(database)/documents/comments/$(commentId)).data.communityId)/posts/$(docData.contentId);

        return /databases/$(database)/documents/$(collection)/$(docData.contentId);
      }
      
      allow read: if true; // Comments are generally public if parent is. For stricter: get(getParentContent(resource.data)).data.isPublic == true
      allow create: if isOwner(request.resource.data.userId) &&
                       (request.resource.data.moderationStatus == 'pending' || request.resource.data.moderationStatus == 'approved');
      allow update: if (isOwner(resource.data.userId) && !isModerationUpdate()) || 
                       (isAdmin() && isModerationUpdate());
      allow delete: if isOwner(resource.data.userId) || 
                       (isAuthenticated() && request.auth.uid == get(getParentContent(resource.data)).data.userId) || 
                       isAdmin(); // Comment owner, content owner, or admin
    }

    // Likes
    match /likes/{likeId} {
      allow read: if isAuthenticated(); // Allow any authenticated user to check if they liked something (for UI state)
      allow create: if isOwner(request.resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Bookmarks
    match /bookmarks/{bookmarkId} {
      allow read, create, delete: if isOwner(resource.data.userId);
    }

    // Followers (followerId_followingId)
    match /followers/{followId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.followerId && request.auth.uid != request.resource.data.followingId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.followerId;
    }

    // Conversations (Direct Messages)
    match /conversations/{conversationId} {
      allow read, update: if isParticipant(conversationId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      match /chat/{messageId} {
        allow read: if isParticipant(conversationId) || isAdmin();
        allow create: if isOwner(request.resource.data.senderId) && isParticipant(conversationId);
        allow update: if isOwner(resource.data.senderId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'deletedFor', 'readBy']);
        // No direct delete by users
      }
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.recipientId) || isAdmin();
      // Create typically handled by Cloud Functions
      allow create: if isAuthenticated(); // Or check for service account/admin for function-based creation
    }

    // Biomes (Private Spaces)
    match /biomes/{biomeId} {
      allow read: if true; 
      allow create: if isOwner(request.resource.data.creatorId);
      allow update: if (isOwner(resource.data.creatorId) && !isCountUpdate(['memberCount'])) || 
                       isAdmin() ||
                       (isAuthenticated() && isCountUpdate(['memberCount'])); // Cloud function updates memberCount
    }

    match /biomeMemberships/{membershipId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || 
                      request.auth.uid == get(/databases/$(database)/documents/biomes/$(resource.data.biomeId)).data.creatorId ||
                      isAdmin());
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Communities (Public Groups)
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.creatorId);
      allow update: if (isOwner(resource.data.creatorId) && !isCountUpdate(['memberCount'])) || 
                       isAdmin() ||
                       (isAuthenticated() && isCountUpdate(['memberCount']));
      
      match /posts/{postId} { // Community Posts
        allow read: if resource.data.moderationStatus == 'approved';
        allow create: if isOwner(request.resource.data.creatorId) &&
                         exists(/databases/$(database)/documents/communityMemberships/$(request.auth.uid)_$(communityId)) &&
                         (request.resource.data.moderationStatus == 'pending' || request.resource.data.moderationStatus == 'approved');
        allow update: if (isOwner(resource.data.creatorId) && !isModerationUpdate()) || isAdmin();
        allow delete: if isOwner(resource.data.creatorId) || isAdmin();
      }
    }

    match /communityMemberships/{membershipId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.userId);
      allow delete: if isOwner(resource.data.userId) || 
                       isAdmin() || 
                       (isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/communities/$(resource.data.communityId)).data.creatorId); // Community owner can remove member
    }
    
    // Admin only collections (example)
    match /adminOnly/{docId} {
        allow read, write: if isAdmin();
    }

    // Existing specific collections (genesisTrails, museIdeas, LegalDocuments)
    match /genesisTrails/{trailId} {
      allow read, create: if isOwner(resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    match /museIdeas/{ideaId} {
      allow read, create: if isOwner(resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    match /LegalDocuments/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}