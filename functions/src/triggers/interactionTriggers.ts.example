
import * as admin from 'firebase-admin';
import * as functions from 'firebase-functions'; // For v1 Functions
// For v2, import specific triggers from 'firebase-functions/v2/firestore' and 'logger'

const db = admin.firestore();

// --- Helper to create notifications ---
async function createNotification(
  recipientId: string,
  type: string,
  message: string,
  actorId?: string | null,
  actorName?: string | null,
  actorAvatarUrl?: string | null,
  entityId?: string | null,
  entityType?: string | null,
  linkTo?: string | null
) {
  if (recipientId === actorId) { // Don't notify user of their own actions
    console.log(`Skipping notification for self-action by ${recipientId} on ${entityType} ${entityId}`);
    return;
  }

  // Check recipient's notification preferences (if implemented on UserProfile)
  // const userProfile = await db.collection('users').doc(recipientId).get();
  // if (userProfile.exists && userProfile.data()?.notificationPreferences?.[type] === false) {
  //   console.log(`User ${recipientId} has opted out of ${type} notifications.`);
  //   return;
  // }

  try {
    await db.collection('notifications').add({
      recipientId,
      type,
      message,
      actorId: actorId || null,
      actorName: actorName || null,
      actorAvatarUrl: actorAvatarUrl || null,
      entityId: entityId || null,
      entityType: entityType || null,
      linkTo: linkTo || null,
      read: false,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
    });
    console.log(`Notification created for ${recipientId}: type ${type}`);
  } catch (error) {
    console.error(`Error creating notification for ${recipientId}:`, error);
  }
}

// --- Like Triggers ---
export const onLikeCreated = functions.firestore
  .document('likes/{likeId}')
  .onCreate(async (snap) => {
    const likeData = snap.data();
    if (!likeData || !likeData.contentId || !likeData.contentType || !likeData.userId) {
      console.error('Like data is missing crucial fields.');
      return null;
    }

    const contentRef = db.collection(likeData.contentType + 's').doc(likeData.contentId); // e.g., 'posts', 'artworks'

    try {
      await contentRef.update({
        likesCount: admin.firestore.FieldValue.increment(1),
      });
      console.log(`Incremented likesCount for ${likeData.contentType} ${likeData.contentId}`);

      const contentSnap = await contentRef.get();
      const contentOwnerId = contentSnap.data()?.userId;
      const likerProfileSnap = await db.collection('users').doc(likeData.userId).get();
      const likerName = likerProfileSnap.data()?.fullName || likerProfileSnap.data()?.username || 'Someone';
      const likerAvatar = likerProfileSnap.data()?.photoURL;

      if (contentOwnerId) {
        await createNotification(
          contentOwnerId,
          `${likeData.contentType}_like`,
          `${likerName} liked your ${likeData.contentType}.`,
          likeData.userId,
          likerName,
          likerAvatar,
          likeData.contentId,
          likeData.contentType,
          `/${likeData.contentType}s/${likeData.contentId}` // Example link
        );
      }
    } catch (error) {
      console.error(`Error processing like for ${likeData.contentType} ${likeData.contentId}:`, error);
    }
    return null;
  });

export const onLikeDeleted = functions.firestore
  .document('likes/{likeId}')
  .onDelete(async (snap) => {
    const likeData = snap.data();
    if (!likeData || !likeData.contentId || !likeData.contentType) {
      console.error('Like data is missing crucial fields for deletion.');
      return null;
    }

    const contentRef = db.collection(likeData.contentType + 's').doc(likeData.contentId);

    try {
      await contentRef.update({
        likesCount: admin.firestore.FieldValue.increment(-1),
      });
      console.log(`Decremented likesCount for ${likeData.contentType} ${likeData.contentId}`);

      // Optionally delete the notification (more complex, requires querying notifications)
      // For simplicity, notifications might remain but become stale or ignorable by client.
    } catch (error) {
      console.error(`Error processing unlike for ${likeData.contentType} ${likeData.contentId}:`, error);
    }
    return null;
  });

// --- Comment Triggers ---
export const onCommentCreated = functions.firestore
  .document('comments/{commentId}')
  .onCreate(async (snap) => {
    const commentData = snap.data();
    if (!commentData || !commentData.contentId || !commentData.contentType || !commentData.userId) {
      console.error('Comment data is missing crucial fields.');
      return null;
    }

    const contentRef = db.collection(commentData.contentType + 's').doc(commentData.contentId);

    try {
      await contentRef.update({
        commentsCount: admin.firestore.FieldValue.increment(1),
      });
      console.log(`Incremented commentsCount for ${commentData.contentType} ${commentData.contentId}`);

      const contentSnap = await contentRef.get();
      const contentOwnerId = contentSnap.data()?.userId;
      const commenterProfileSnap = await db.collection('users').doc(commentData.userId).get();
      const commenterName = commenterProfileSnap.data()?.fullName || commenterProfileSnap.data()?.username || 'Someone';
      const commenterAvatar = commenterProfileSnap.data()?.photoURL;

      if (contentOwnerId) {
        await createNotification(
          contentOwnerId,
          `${commentData.contentType}_comment`,
          `${commenterName} commented on your ${commentData.contentType}.`,
          commentData.userId,
          commenterName,
          commenterAvatar,
          commentData.contentId,
          commentData.contentType,
           `/${commentData.contentType}s/${commentData.contentId}#comment-${snap.id}` // Example link
        );
      }
      // TODO: Parse commentData.commentText for mentions and notify mentioned users.
    } catch (error) {
      console.error(`Error processing comment for ${commentData.contentType} ${commentData.contentId}:`, error);
    }
    return null;
  });

export const onCommentDeleted = functions.firestore
  .document('comments/{commentId}')
  .onDelete(async (snap) => {
    const commentData = snap.data();
    if (!commentData || !commentData.contentId || !commentData.contentType) {
      console.error('Comment data is missing crucial fields for deletion.');
      return null;
    }
    const contentRef = db.collection(commentData.contentType + 's').doc(commentData.contentId);
    try {
      await contentRef.update({
        commentsCount: admin.firestore.FieldValue.increment(-1),
      });
      console.log(`Decremented commentsCount for ${commentData.contentType} ${commentData.contentId}`);
    } catch (error) {
      console.error(`Error processing comment deletion for ${commentData.contentType} ${commentData.contentId}:`, error);
    }
    return null;
  });

// --- Follow Triggers ---
// Assumes 'followers' collection stores docs with ID like '{followerId}_{followingId}'
// and fields: followerId, followingId, createdAt
export const onFollowCreated = functions.firestore
  .document('followers/{followId}') // Using 'followers' collection as defined in interactionActions
  .onCreate(async (snap) => {
    const followData = snap.data();
    if (!followData || !followData.followerId || !followData.followingId) {
      console.error('Follow data is missing crucial fields.');
      return null;
    }

    const followerRef = db.collection('users').doc(followData.followerId);
    const followingRef = db.collection('users').doc(followData.followingId);

    const batch = db.batch();
    batch.update(followerRef, { followingCount: admin.firestore.FieldValue.increment(1) });
    batch.update(followingRef, { followersCount: admin.firestore.FieldValue.increment(1) });

    try {
      await batch.commit();
      console.log(`Updated follow counts for ${followData.followerId} and ${followData.followingId}`);

      const followerProfileSnap = await followerRef.get();
      const followerName = followerProfileSnap.data()?.fullName || followerProfileSnap.data()?.username || 'Someone';
      const followerAvatar = followerProfileSnap.data()?.photoURL;

      await createNotification(
        followData.followingId,
        'new_follower',
        `${followerName} started following you.`,
        followData.followerId,
        followerName,
        followerAvatar,
        followData.followerId, // Entity is the follower
        'userProfile',
        `/profile/${followData.followerId}`
      );
    } catch (error) {
      console.error(`Error processing follow between ${followData.followerId} and ${followData.followingId}:`, error);
    }
    return null;
  });

export const onFollowDeleted = functions.firestore
  .document('followers/{followId}')
  .onDelete(async (snap) => {
    const followData = snap.data();
    if (!followData || !followData.followerId || !followData.followingId) {
      console.error('Follow data is missing crucial fields for unfollow.');
      return null;
    }

    const followerRef = db.collection('users').doc(followData.followerId);
    const followingRef = db.collection('users').doc(followData.followingId);

    const batch = db.batch();
    batch.update(followerRef, { followingCount: admin.firestore.FieldValue.increment(-1) });
    batch.update(followingRef, { followersCount: admin.firestore.FieldValue.increment(-1) });

    try {
      await batch.commit();
      console.log(`Updated unfollow counts for ${followData.followerId} and ${followData.followingId}`);
      // Optionally delete the "new_follower" notification (more complex)
    } catch (error) {
      console.error(`Error processing unfollow between ${followData.followerId} and ${followData.followingId}:`, error);
    }
    return null;
  });
