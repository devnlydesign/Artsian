
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Users: Profile images and banners
    // Path: /users/{userId}/profile/{filename}
    // Path: /users/{userId}/banner/{filename}
    match /users/{userId}/{imageType}/{fileName} {
      allow read: if true; // Profile images and banners are public
      allow write: if request.auth != null && request.auth.uid == userId &&
                    (imageType == 'profile' || imageType == 'banner') &&
                    request.resource.size < 5 * 1024 * 1024 && // Max 5MB
                    request.resource.contentType.matches('image/.*');
    }

    // Posts: Media content (images, videos, audio)
    // Path: /posts/{userId}/{postId}/{filename} (Scoped by userId for easier user data deletion if needed)
    match /posts/{userId}/{postId}/{fileName} {
      allow read: if true; // Publicly readable if post is public (Firestore rules enforce post visibility)
      allow write: if request.auth != null && request.auth.uid == userId &&
                    request.resource.size < 50 * 1024 * 1024 && // Max 50MB for general posts (adjust as needed)
                    (request.resource.contentType.matches('image/.*') ||
                     request.resource.contentType.matches('video/.*') ||
                     request.resource.contentType.matches('audio/.*'));
    }

    // Stories: Media content (images, videos)
    // Path: /stories/{userId}/{storyId}/{filename}
    match /stories/{userId}/{storyId}/{fileName} {
      allow read: if true; // Publicly readable (Firestore rules enforce expiry and visibility)
      allow write: if request.auth != null && request.auth.uid == userId &&
                    request.resource.size < 25 * 1024 * 1024 && // Max 25MB for stories
                    (request.resource.contentType.matches('image/.*') ||
                     request.resource.contentType.matches('video/.*'));
    }

    // Reels: Video content
    // Path: /reels/{userId}/{reelId}/{fileName}
    match /reels/{userId}/{reelId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId &&
                    request.resource.size < 100 * 1024 * 1024 && // Max 100MB for reels
                    request.resource.contentType.matches('video/.*');
    }

    // Music: Audio tracks and optional thumbnails
    // Path: /music/{userId}/{musicId}/audio/{filename}
    // Path: /music/{userId}/{musicId}/thumbnail/{filename}
    match /music/{userId}/{musicId}/{fileType}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId &&
                    ( (fileType == 'audio' && request.resource.size < 50 * 1024 * 1024 && request.resource.contentType.matches('audio/.*')) ||
                      (fileType == 'thumbnail' && request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*')) );
    }
    
    // OtherArt: Media content
    // Path: /otherArt/{userId}/{artId}/{filename}
    match /otherArt/{userId}/{artId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId &&
                    request.resource.size < 50 * 1024 * 1024 && // Max 50MB
                    (request.resource.contentType.matches('image/.*') ||
                     request.resource.contentType.matches('video/.*') || // If animation
                     request.resource.contentType.matches('model/.*')); // If 3D model, adjust MIME type
    }

    // Message Media (Chat Attachments)
    // Path: /messages/{conversationId}/{messageId}/{fileName}
    match /messages/{conversationId}/{messageId}/{fileName} {
        // Read access requires checking if user is part of the conversation in Firestore
        allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        // Write access requires user to be part of conversation and uploader to be sender
        allow write: if request.auth != null &&
                      exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                      request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
                      // Further check: ensure filename matches messageId or is linked from Firestore doc
                      request.resource.size < 25 * 1024 * 1024; // Max 25MB for attachments
                      // Add specific content type checks if needed
    }


    // --- Existing ARTISAN App Storage Paths (Review and Integrate/Update) ---

    // Artworks (Crystalline Blooms)
    // Path: /artworks/{userId}/original_{timestamp}_{filename} (example from crystalline-blooms/new)
    // Path: /artworks/{userId}/{artworkId}/{layerId?}/{filename}
    match /artworks/{userId}/{path=**} { // More generic path to cover subfolders like layers
      allow read: if true; // Assuming public read for published artworks
      allow write: if request.auth != null && request.auth.uid == userId &&
                    request.resource.size < 50 * 1024 * 1024 && // Adjust as needed
                    (request.resource.contentType.matches('image/.*') ||
                     request.resource.contentType.matches('video/.*') ||
                     request.resource.contentType.matches('audio/.*'));
    }

    // Shop Items (Artist Products)
    // Path: /shopItems/{artistId}/original_{timestamp}_{filename} (example from my-shop/manage)
    // Updated to artistProducts to match Firestore collection rename
    match /artistProducts/{artistId}/{path=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == artistId &&
                    request.resource.size < 10 * 1024 * 1024 && // Adjust for product images
                    request.resource.contentType.matches('image/.*');
    }
    
    // Digital Products (if stored directly, for e-commerce)
    // Path: /digitalProducts/{productId}/{filename}
    // This path needs careful rules, usually read access granted via custom claims or signed URLs after purchase
    match /digitalProducts/{productId}/{fileName} {
        allow read: if false; // Default deny, access should be controlled via backend logic (e.g. signed URLs)
        allow write: if request.auth.token.admin == true; // Admin/Artist upload
    }

  }
}
    